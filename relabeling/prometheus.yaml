# my global config
global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: "prometheus"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
      - targets: ["localhost:9090"]

  - job_name: "nodes"
    scheme: https
    tls_config:
      ca_file: /etc/prometheus/node_exporter.crt
      insecure_skip_verify: true
    basic_auth:
      username: prometheus
      password: secret-password
    static_configs:
      - targets: ["node01:9100", "node02:9100"]
  - job_name: "demo"
    file_sd_configs:
      - files:
          - /etc/prometheus/file-sd.json
    relabel_configs:
      - source_labels: [env]
        regex: prod
        action: drop

    # Only keep servers with team=api and env=prod
    # relabel_configs:
    #   - source_labels: [team, env]
    #     regex: api;prod
    #     action: keep

    # Grab team label and relabel it with other key and the value gets prepended with "org-"
    # relabel_configs:
    #   - source_labels: [team]
    #     regex: (.*)
    #     action: replace
    #     target_label: organization
    #     replacement: org-$1

    # Drop type label
    # relabel_configs:
    #   - regex: type
    #     action: labeldrop

    # Labelmap example, __meta_os__=centos --> os=centos
    # relabel_configs:
    #   - regex: __meta_(.*)__
    #     action: labelmap
    #     replacement: $1

    # Drop a specific metric
    # metric_relabel_configs:
    #   - source_labels: [__name__]
    #     regex: node_network_transmit_drop_total
    #     action: drop

    # Rename a metric
    # metric_relabel_configs:
    #   - source_labels: [__name__]
    #     regex: node_network_receive_bytes_total
    #     action: replace
    #     target_label: __name__
    #     replacement: node_network_rx_bytes_total

    # Drop a label on a metric
    # metric_relabel_configs:
    #   - regex: fstype
    #     action: labeldrop

    # Rename a label within a metric
    # metric_relabel_configs:
    #   - source_labels: [device]
    #     regex: (.*)
    #     action: replace
    #     target_label: interface
    #     replacement: $1
